{"info": {"version": 1, "description": "API endpoints for <a href=\"https://scicrunch.org\">scicrunch.org</a>, <a href=\"https://dknet.org\">dknet.org</a> and <a href=\"https://neuinfo.org\">neuinfo.org</a>.<br/>All API calls require the 'key' field to be set with an API key", "title": "SciCrunch API Docs"}, "paths": {"/dataservices/literature/pmid": {"get": {"summary": "retrieve by PMID", "responses": {"default": {"$ref": "#/definitions/object"}}, "parameters": [{"required": true, "type": "integer", "name": "pmid", "in": "query"}], "tags": ["Data services"]}}, "/resource/mention/bymention/{mentionid}": {"get": {"summary": "Get all resources that have this mention", "responses": {"default": {"$ref": "#/definitions/ret_str_array"}}, "parameters": [{"description": "mention ID", "required": false, "type": "string", "name": "mentionid", "in": "path"}, {"description": "mention rating", "required": false, "type": "string", "name": "rating", "in": "query"}, {"description": "mention not_rating", "required": false, "type": "string", "name": "not_rating", "in": "query"}], "tags": ["Resources"]}}, "/resource/versions/all/{rid}": {"get": {"summary": "Get all versions of resources", "responses": {"default": {"$ref": "#/definitions/ret_obj_array"}}, "parameters": [{"description": "ID of resource", "required": false, "type": "string", "name": "rid", "in": "path"}], "tags": ["Resources"]}}, "/elastic/_indices": {"get": {"summary": "Get a list of all indices", "responses": {"200": {"$ref": "#/definitions/elasticIndices"}}, "tags": ["Elastic"]}}, "/scigraph/graph/{id}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGGraph"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "This ID should be either a CURIE or an IRI", "required": true, "type": "string", "name": "id", "in": "path"}, {"description": "Which properties to project. Defaults to '*'.", "items": {"default": "*", "type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "project"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/graphson", "application/xml", "application/graphml+xml", "application/xgmml", "text/gml", "text/csv", "text/tab-separated-values", "image/jpeg", "image/png"], "tags": ["SciGraph graph"], "summary": "Get all properties of a node", "operationId": "getNode"}}, "/entitymapping/list": {"get": {"summary": "Get a list of entity mapping sources", "responses": {"default": {"$ref": "#/definitions/object"}, "200": {"$ref": "#/definitions/apiReturn_array_string"}}, "tags": ["Entity Mapping"]}}, "/entitymapping/list/{source}/{table}": {"get": {"responses": {"default": {"$ref": "#/definitions/object"}, "200": {"$ref": "#/definitions/apiReturn_array_string"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}, {"description": "The table in the source", "required": true, "type": "string", "name": "table", "in": "path"}], "tags": ["Entity Mapping"]}}, "/entitymapping/list/{source}": {"get": {"responses": {"default": {"$ref": "#/definitions/object"}, "200": {"$ref": "#/definitions/apiReturn_array_string"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}], "tags": ["Entity Mapping"]}}, "/ilx/search/curie/{curie}": {"get": {"summary": "Search on a curie", "responses": {"default": {"$ref": "#/definitions/apiReturn_ilx"}}, "parameters": [{"description": "Curie being searched", "required": true, "type": "string", "name": "curie", "in": "path"}], "tags": ["ILX and term"]}}, "/entitymapping/byvaluelist": {"get": {"summary": "Get a list of entities by value separated by a delimiter", "responses": {"default": {"$ref": "#/definitions/errorObject"}, "200": {"$ref": "#/definitions/apiReturn_array_entityMapping"}}, "parameters": [{"description": "list of values separated by a delimiter", "required": true, "type": "string", "name": "list", "in": "query"}, {"description": "", "required": true, "type": "string", "name": "delimiter", "in": "query"}], "tags": ["Entity Mapping"]}}, "/scigraph/annotations/url": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"type": "string"}}}, "description": "Annotate the content of a URL (presumably an HTML page). <em>NOTE:</em> this method will add a &lt;base&gt; element to the head.", "parameters": [{"required": true, "type": "string", "name": "url", "in": "query"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "query", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "query", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeNumbers"}, {"description": "HTML tags that should not be annotated", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "ignoreTag"}, {"description": "CSS stylesheets to add to the HEAD", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "stylesheet"}, {"description": "JavaScripts that should to add to the HEAD", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "scripts"}, {"description": "A set of element IDs to annotate", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "targetId"}, {"description": "A set of CSS class names to annotate", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "targetClass"}], "produces": ["text/html"], "tags": ["SciGraph annotations"], "summary": "Annotate a URL", "operationId": "annotateUrl"}}, "/scigraph/cypher/resolve": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"type": "string"}}}, "description": "Resolves curies and relationships.", "parameters": [{"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"description": "The cypher query to resolve", "required": true, "type": "string", "name": "cypherQuery", "in": "query"}], "produces": ["text/plain"], "tags": ["SciGraph cypher"], "summary": "Cypher query resolver", "operationId": "resolve"}}, "/resource/rel/view/{rid}": {"get": {"summary": "Get all relationships for a resource", "responses": {"default": {"$ref": "#/definitions/ret_str_array"}}, "parameters": [{"description": "ID of the resource", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "relationship count", "required": false, "type": "integer", "name": "count", "in": "query"}, {"description": "the offset", "required": false, "type": "integer", "name": "offset", "in": "query"}, {"description": "canon_only", "required": false, "type": "integer", "name": "canon_only", "in": "query"}], "tags": ["Resources"]}}, "/dataservices/federation/search": {"get": {"summary": "search all data views", "responses": {"default": {"$ref": "#/definitions/object"}}, "parameters": [{"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}], "tags": ["Data services"]}}, "/entitymapping/update/{source}/{table}/{column}/{value}/{identifier}": {"post": {"summary": "Update an entity mapping", "responses": {"default": {"$ref": "#/definitions/object"}, "200": {"$ref": "#/definitions/apiReturn_entityMapping"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}, {"description": "The table in the source", "required": true, "type": "string", "name": "table", "in": "path"}, {"description": "The column in the table", "required": true, "type": "string", "name": "column", "in": "path"}, {"description": "value being mapped to", "required": true, "type": "string", "name": "value", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "identifier", "in": "path"}, {"description": "", "required": false, "type": "string", "name": "identifier", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "relation", "in": "formData"}, {"description": "", "required": false, "type": "boolean", "name": "match_substring", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "status", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "external_id", "in": "formData"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Entity Mapping"]}}, "/resource/fields/autocomplete": {"get": {"responses": {"default": {"$ref": "#/definitions/ret_str_array"}}, "parameters": [{"description": "Field of the resource", "required": true, "type": "string", "name": "field", "in": "query"}, {"description": "Value of the Resource", "required": true, "type": "string", "name": "value", "in": "query"}], "tags": ["Resources"]}}, "/resource/rel/types": {"get": {"summary": "Get all relationship types", "responses": {"default": {"$ref": "#/definitions/ret_str_array"}}, "tags": ["Resources"]}}, "/resource/fields/add": {"post": {"summary": "Add a resource", "responses": {"default": {"$ref": "#/definitions/ret_field_add"}}, "parameters": [{"description": "The resource fields, in JSON format", "required": true, "type": "string", "name": "columns", "in": "formData"}, {"description": "The type ID of the resource", "required": false, "type": "integer", "name": "resource_type", "in": "formData"}, {"description": "The community ID that is submitting the resource", "required": false, "type": "integer", "name": "cid", "in": "formData"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Resources"]}}, "/resource/fields/edit/{rid}": {"post": {"summary": "Update resource fields", "responses": {"default": {"$ref": "#/definitions/ret_edit"}}, "parameters": [{"description": "ID of the resource", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "json object where each key is the field and each value is the field being changed.", "required": false, "type": "string", "name": "fields", "in": "formData"}], "tags": ["Resources"]}}, "/resource/fields/view/{rid}": {"get": {"summary": "Get single resource", "responses": {"default": {"$ref": "#/definitions/ret_obj_array"}}, "parameters": [{"description": "ID of the resource", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "resource version", "required": false, "type": "integer", "name": "version", "in": "query"}], "tags": ["Resources"]}}, "/scigraph/vocabulary/autocomplete/{term}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGCompletion"}, "type": "array"}}}, "description": "This resource is designed for autocomplete services.", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Term prefix to find", "required": true, "type": "string", "name": "term", "in": "path"}, {"description": "Maximum result count", "default": "20", "required": false, "in": "query", "type": "string", "name": "limit"}, {"description": "Should synonyms be matched", "default": "true", "required": false, "in": "query", "type": "string", "name": "searchSynonyms"}, {"description": "Should abbreviations be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAbbreviations"}, {"description": "Should acronyms be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAcronyms"}, {"description": "Should deprecated classes be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeDeprecated"}, {"description": "Categories to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "category"}, {"description": "CURIE prefixes to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "prefix"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Find a concept by its prefix", "operationId": "findByPrefix"}}, "/scigraph/graph/properties": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph graph"], "summary": "Get all property keys", "operationId": "getProperties"}}, "/scigraph/graph/reachablefrom/{id}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGGraph"}, "type": "array"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "The type of the edge", "required": true, "type": "string", "name": "id", "in": "path"}, {"description": "A label hint to find the start node.", "required": false, "type": "string", "name": "hint", "in": "query"}, {"description": "A list of relationships to traverse, in order. Supports cypher operations such as relA|relB or relA*.", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "relationships"}, {"description": "A list of node labels to filter.", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "lbls"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/graphson", "application/xml", "application/graphml+xml", "application/xgmml", "text/gml", "text/csv", "text/tab-separated-values", "image/jpeg", "image/png"], "tags": ["SciGraph graph"], "summary": "Get all the nodes reachable from a starting point, traversing the provided edges.", "operationId": "reachableFrom"}}, "/resource/rel/del/{rid}": {"post": {"summary": "delete relationship", "responses": {"default": {"$ref": "#/definitions/ret_add_or_del"}}, "parameters": [{"description": "resource ID", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "left side of relationship string", "required": true, "type": "string", "name": "id1", "in": "formData"}, {"description": "right side of relationship string", "required": true, "type": "string", "name": "id2", "in": "formData"}, {"description": "type of id that is not rid (rel)", "required": true, "type": "string", "name": "type", "in": "formData"}, {"description": "name of relationship", "required": true, "type": "string", "name": "relationship", "in": "formData"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Resources"]}}, "/entitymapping/bycolumn/{source}/{table}/{column}/{value}": {"get": {"summary": "Get an entity mapping by source", "responses": {"default": {"$ref": "#/definitions/errorObject"}, "200": {"$ref": "#/definitions/apiReturn_array_entityMapping"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}, {"description": "The table in the source", "required": true, "type": "string", "name": "table", "in": "path"}, {"description": "The column in the table", "required": true, "type": "string", "name": "column", "in": "path"}, {"description": "value being mapped to", "required": true, "type": "string", "name": "value", "in": "path"}], "tags": ["Entity Mapping"]}}, "/dataservices/literature/search": {"get": {"summary": "search the Pubmed literature", "responses": {"default": {"$ref": "#/definitions/object"}}, "parameters": [{"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}, {"required": false, "type": "integer", "name": "count", "in": "query"}, {"required": false, "type": "integer", "name": "offset", "in": "query"}, {"required": false, "type": "boolean", "name": "authorFilter", "in": "query"}, {"required": false, "type": "boolean", "name": "yearFilter", "in": "query"}, {"required": false, "type": "boolean", "name": "journalFilter", "in": "query"}], "tags": ["Data services"]}}, "/scigraph/annotations/entities": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGEntityAnnotation"}, "type": "array"}}}, "description": "Get the entities from content without embedding them in the source - only the entities are returned. <em>NOTE:</em> This is an abuse of REST principals. This POST operation doesn't create resources", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "formData"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "formData", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "formData", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeNumbers"}], "produces": ["application/json"], "tags": ["SciGraph annotations"], "summary": "Get entities from text", "consumes": ["application/x-www-form-urlencoded"], "operationId": "postEntities"}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGEntityAnnotation"}, "type": "array"}}}, "description": "Get entities from content without embedding them in the source.", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "query"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "query", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "query", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeNumbers"}], "produces": ["application/json"], "tags": ["SciGraph annotations"], "summary": "Get entities from text", "operationId": "getEntities"}}, "/scigraph/vocabulary/suggestions/{term}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "Suggests terms based on a mispelled or mistyped term.", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Mispelled term", "required": true, "type": "string", "name": "term", "in": "path"}, {"description": "Maximum result count", "default": "1", "required": false, "in": "query", "type": "string", "name": "limit"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Suggest terms", "operationId": "suggestFromTerm"}}, "/scigraph/refine/preview/{id}": {"get": {"produces": ["application/json", "application/javascript"], "operationId": "getPreview", "responses": {"200": {"headers": {}, "description": "successful operation", "schema": {"$ref": "#/definitions/SGConceptView"}}}, "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGServiceMetadata"}, "required": false, "name": "body", "in": "body"}, {"required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["SciGraph refine"]}}, "/resource/rel/count/{rid}": {"get": {"summary": "Get the count of all relationships for a resource", "responses": {"default": {"$ref": "#/definitions/ret_int"}}, "parameters": [{"description": "ID of the resource", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "canon_only", "required": false, "type": "integer", "name": "canon_only", "in": "query"}], "tags": ["Resources"]}}, "/resource/mention/add/{rid}": {"post": {"summary": "Add a new mention", "responses": {"default": {"$ref": "#/definitions/ret_mention_add"}}, "parameters": [{"description": "Resource ID of mention", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "ID of mention", "required": false, "type": "string", "name": "mentionid", "in": "formData"}, {"description": "user, curator, resource-mentions", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Resources"]}}, "/resource/fields/types": {"get": {"summary": "Get all the resource types", "responses": {"default": {"$ref": "#/definitions/ret_obj_array"}}, "tags": ["Resources"]}}, "/entitymapping/add": {"post": {"summary": "Add an entity mapping", "responses": {"201": {"$ref": "#/definitions/apiReturn_entityMapping"}, "default": {"$ref": "#/definitions/errorObject"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "formData"}, {"description": "The table in the source", "required": true, "type": "string", "name": "table", "in": "formData"}, {"description": "The column in the table", "required": true, "type": "string", "name": "column", "in": "formData"}, {"description": "The value being mapped to", "required": true, "type": "string", "name": "value", "in": "formData"}, {"description": "", "required": true, "type": "string", "name": "identifier", "in": "formData"}, {"description": "The table in the source", "required": false, "type": "string", "name": "external_id", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "relation", "in": "formData"}, {"description": "", "required": false, "type": "boolean", "name": "match_substring", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "status", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "key", "in": "formData"}], "tags": ["Entity Mapping"]}}, "/dataservices/federation/facets/{viewid}": {"get": {"summary": "get facets for a data view", "responses": {"default": {"$ref": "#/definitions/object"}}, "parameters": [{"description": "the view ID (example nlx_144509-1 is the scicrunch registry view ID)", "required": true, "type": "string", "name": "viewid", "in": "path"}, {"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}, {"required": false, "type": "integer", "name": "count", "in": "query"}, {"required": false, "type": "integer", "name": "offset", "in": "query"}, {"description": "Facets specified like facetName:facetValue", "required": false, "type": "string", "name": "facet", "in": "query"}, {"description": "Facets specified like filterName:filterValue", "required": false, "type": "string", "name": "filter", "in": "query"}, {"description": "The minimum threshold for facets to return", "required": false, "type": "integer", "name": "minCount", "in": "query"}], "tags": ["Data services"]}}, "/scigraph/graph/neighbors/{id}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGGraph"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "This ID should be either a CURIE or an IRI", "required": true, "type": "string", "name": "id", "in": "path"}, {"description": "How far to traverse neighbors", "default": "1", "required": false, "in": "query", "type": "string", "name": "depth"}, {"description": "Traverse blank nodes", "default": "false", "required": false, "in": "query", "type": "string", "name": "blankNodes"}, {"description": "Which relationship to traverse", "required": false, "type": "string", "name": "relationshipType", "in": "query"}, {"enum": ["BOTH", "INCOMING", "OUTGOING"], "description": "Which direction to traverse: INCOMING, OUTGOING, BOTH (default). Only used if relationshipType is specified.", "default": "BOTH", "required": false, "in": "query", "type": "string", "name": "direction"}, {"description": "Should subproperties and equivalent properties be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "entail"}, {"description": "Which properties to project. Defaults to '*'.", "items": {"default": "*", "type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "project"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/graphson", "application/xml", "application/graphml+xml", "application/xgmml", "text/gml", "text/csv", "text/tab-separated-values", "image/jpeg", "image/png"], "tags": ["SciGraph graph"], "summary": "Get neighbors", "operationId": "getNeighbors"}}, "/resource/versions/diff/{rid}": {"get": {"summary": "Get difference between two resource versions", "responses": {"default": {"$ref": "#/definitions/ret_obj_array"}}, "parameters": [{"description": "ID of resource", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "version of the first resource", "required": true, "type": "integer", "name": "1", "in": "query"}, {"description": "version of the second resource", "required": true, "type": "integer", "name": "2", "in": "query"}], "tags": ["Resources"]}}, "/entitymapping/bysource/{source}/{value}": {"get": {"summary": "Get an entity mapping by source and value", "responses": {"default": {"$ref": "#/definitions/errorObject"}, "200": {"$ref": "#/definitions/apiReturn_array_entityMapping"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}, {"description": "value being mapped to", "required": true, "type": "string", "name": "value", "in": "path"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "query"}], "tags": ["Entity Mapping"]}}, "/community/{community_portal_name}/dataservices/{category}/{subcategory}": {"get": {"summary": "get a community category resource", "responses": {"default": {"$ref": "#/definitions/gen_apiReturn_comm"}}, "parameters": [{"description": "community portal name", "required": true, "type": "string", "name": "community_portal_name", "in": "path"}, {"description": "category name", "required": true, "type": "string", "name": "category", "in": "path"}, {"description": "subcategory name", "required": true, "type": "string", "name": "subcategory", "in": "path"}, {"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}], "tags": ["Community"]}}, "/ilx/search/identifier/{identifier}": {"get": {"summary": "Search on an identifier", "responses": {"default": {"$ref": "#/definitions/apiReturn_ilx"}}, "parameters": [{"description": "Identifier being searched", "required": true, "type": "string", "name": "identifier", "in": "path"}], "tags": ["ILX and term"]}}, "/scigraph/cypher/curies": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"additionalProperties": {"type": "string"}, "type": "object"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph cypher"], "summary": "Get the curie map", "operationId": "getCuries"}}, "/entitymapping/add/{source}/{table}/{column}/{value}": {"post": {"summary": "Add an entity mapping", "responses": {"201": {"$ref": "#/definitions/apiReturn_entityMapping"}, "default": {"$ref": "#/definitions/errorObject"}}, "parameters": [{"description": "The ID of the source", "required": true, "type": "string", "name": "source", "in": "path"}, {"description": "The table in the source", "required": true, "type": "string", "name": "table", "in": "path"}, {"description": "The column in the table", "required": true, "type": "string", "name": "column", "in": "path"}, {"description": "value being mapped to", "required": true, "type": "string", "name": "value", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "identifier", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "external_id", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "relation", "in": "formData"}, {"description": "", "required": false, "type": "boolean", "name": "match_substring", "in": "formData"}, {"description": "", "required": false, "type": "string", "name": "status", "in": "formData"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Entity Mapping"]}}, "/scigraph/lexical/pos": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGPosToken"}, "type": "array"}}}, "description": "", "parameters": [{"description": "The text to tag", "required": true, "type": "string", "name": "text", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph lexical"], "summary": "Tag parts of speech.", "operationId": "getPos"}}, "/scigraph/vocabulary/prefixes": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "CURIE prefixes can be used to limit results", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Get all CURIE prefixes", "operationId": "getCuriePrefixes"}}, "/scigraph/graph/neighbors": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGGraph"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "This ID should be either a CURIE or an IRI", "items": {"type": "string"}, "required": true, "collectionFormat": "csv", "in": "query", "type": "array", "name": "id"}, {"description": "How far to traverse neighbors", "default": "1", "required": false, "in": "query", "type": "string", "name": "depth"}, {"description": "Traverse blank nodes", "default": "false", "required": false, "in": "query", "type": "string", "name": "blankNodes"}, {"description": "Which relationship to traverse", "required": false, "type": "string", "name": "relationshipType", "in": "query"}, {"enum": ["BOTH", "INCOMING", "OUTGOING"], "description": "Which direction to traverse: INCOMING, OUTGOING, BOTH (default). Only used if relationshipType is specified.", "default": "BOTH", "required": false, "in": "query", "type": "string", "name": "direction"}, {"description": "Should subproperties and equivalent properties be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "entail"}, {"description": "Which properties to project. Defaults to '*'.", "items": {"default": "*", "type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "project"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/graphson", "application/xml", "application/graphml+xml", "application/xgmml", "text/gml", "text/csv", "text/tab-separated-values", "image/jpeg", "image/png"], "tags": ["SciGraph graph"], "summary": "Get neighbors", "operationId": "getNeighborsFromMultipleRoots"}}, "/scigraph/refine/view/{id}": {"get": {"produces": ["application/json", "application/javascript"], "operationId": "getView", "responses": {"200": {"headers": {}, "description": "successful operation", "schema": {"$ref": "#/definitions/SGConceptView"}}}, "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGServiceMetadata"}, "required": false, "name": "body", "in": "body"}, {"required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["SciGraph refine"]}}, "/scigraph/vocabulary/search/{term}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGConceptDTO"}, "type": "array"}}, "404": {"description": "Concept with term could not be found"}}, "description": "Searches the complete text of the term. Individual tokens within multi-token labels are matched (ie: \"foo bar\" would be returned by a search for \"bar\"). Results are not guaranteed to be unique.", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Term to find", "required": true, "type": "string", "name": "term", "in": "path"}, {"description": "Maximum result count", "default": "20", "required": false, "in": "query", "type": "string", "name": "limit"}, {"description": "Should synonyms be matched", "default": "true", "required": false, "in": "query", "type": "string", "name": "searchSynonyms"}, {"description": "Should abbreviations be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAbbreviations"}, {"description": "Should acronyms be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAcronyms"}, {"description": "Categories to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "category"}, {"description": "CURIE prefixes to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "prefix"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Find a concept from a term fragment", "operationId": "searchByTerm"}}, "/scigraph/lexical/chunks": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGToken"}, "type": "array"}}}, "description": "The extracted chunks are based upon POS tagging. This may result in different results that extracting entities.", "parameters": [{"description": "The text from which to extract chunks", "required": true, "type": "string", "name": "text", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph lexical"], "summary": "Extract entities from text.", "operationId": "getChunks"}}, "/scigraph/lexical/entities": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGToken"}, "type": "array"}}}, "description": "The extracted entites are based upon a Hidden Markov Model. This may result in different results that extracting chunks.", "parameters": [{"description": "The text from which to extract entities", "required": true, "type": "string", "name": "text", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph lexical"], "summary": "Extract entities from text.", "operationId": "getEntities"}}, "/scigraph/graph/edges/{type}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGGraph"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "The type of the edge", "required": true, "type": "string", "name": "type", "in": "path"}, {"description": "Should subproperties and equivalent properties be included", "default": "true", "required": false, "in": "query", "type": "string", "name": "entail"}, {"description": "The number of edges to be returned", "default": "100", "required": false, "in": "query", "type": "string", "name": "limit"}, {"description": "The number of edges to skip", "default": "0", "required": false, "in": "query", "type": "string", "name": "skip"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/graphson", "application/xml", "application/graphml+xml", "application/xgmml", "text/gml", "text/csv", "text/tab-separated-values", "image/jpeg", "image/png"], "tags": ["SciGraph graph"], "summary": "Get nodes connected by an edge type", "operationId": "getEdges"}}, "/scigraph/annotations": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"type": "string"}}}, "description": "A POST resource for API clients wishing to annotate longer content. This is most likely the method of choice for most clients. <em>NOTE:</em> This is an abuse of REST principals. This POST operation doesn't create resources", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "formData"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "formData", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "formData", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeNumbers"}, {"description": "HTML tags that should not be annotated", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "ignoreTag"}, {"description": "CSS stylesheets to add to the HEAD", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "stylesheet"}, {"description": "JavaScripts that should to add to the HEAD", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "scripts"}, {"description": "A set of element IDs to annotate", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "targetId"}, {"description": "A set of CSS class names to annotate", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "targetClass"}], "produces": ["application/json"], "tags": ["SciGraph annotations"], "summary": "Annotate text", "consumes": ["application/x-www-form-urlencoded"], "operationId": "annotatePost"}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"type": "string"}}}, "description": "This service is designed to annotate shorter fragments of text. Use the POST version if your content is too long.", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "query"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "query", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "query", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeNumbers"}], "produces": ["text/plain; charset=utf-8"], "tags": ["SciGraph annotations"], "summary": "Annotate text", "operationId": "annotate"}}, "/scigraph/refine/reconcile": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGresult"}}}, "description": "An implementation of <a href=\"https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API\" target=\"_blank\">OpenRefine reconciliation services</a> supporting OpenRefine term resolution backed by a SciGraph instance. It is unlikely that a client will use these services directly but would instead point an OpenRefine instance to <em>http://example.org/SciGraph/refine/reconcile<em>", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGServiceMetadata"}, "required": false, "name": "body", "in": "body"}, {"description": "A call to a reconciliation service API for a single query looks like either of these:<ul><li>http://foo.com/bar/reconcile?query=...string...</li><li>http://foo.com/bar/reconcile?query={...json object literal...}</li></ul>If the query parameter is a string, then it's an abbreviation of <em>query={\"query\":...string...}</em>.<em>NOTE:</em> We encourage all API consumers to consider the single query mode <b>DEPRECATED</b>.Refine currently only uses the multiple query mode, but other consumers of the API may use the single query option since it was included in the spec.", "required": false, "type": "string", "name": "query", "in": "formData"}, {"description": "A call to a standard reconciliation service API for multiple queries looks like this:<ul><li>http://foo.com/bar/reconcile?queries={...json object literal...}</li></ul>The json object literal has zero or more key/value pairs with arbitrary keys where the value is in the same format as a single query, e.g.<ul><li>http://foo.com/bar/reconcile?queries={ \"q0\" : { \"query\" : \"foo\" }, \"q1\" : { \"query\" : \"bar\" } }</li></ul>\"q0\" and \"q1\" can be arbitrary strings.", "required": false, "type": "string", "name": "queries", "in": "formData"}], "produces": ["application/json", "application/javascript"], "tags": ["SciGraph refine"], "summary": "Reconcile terms", "operationId": "suggestFromTerm_POST"}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGresult"}}}, "description": "An implementation of <a href=\"https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API\" target=\"_blank\">OpenRefine reconciliation services</a> supporting OpenRefine term resolution backed by a SciGraph instance. It is unlikely that a client will use these services directly but would instead point an OpenRefine instance to <em>http://example.org/SciGraph/refine/reconcile<em>", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGServiceMetadata"}, "required": false, "name": "body", "in": "body"}, {"description": "A call to a reconciliation service API for a single query looks like either of these:<ul><li>http://foo.com/bar/reconcile?query=...string...</li><li>http://foo.com/bar/reconcile?query={...json object literal...}</li></ul>If the query parameter is a string, then it's an abbreviation of <em>query={\"query\":...string...}</em>.<em>NOTE:</em> We encourage all API consumers to consider the single query mode <b>DEPRECATED</b>.Refine currently only uses the multiple query mode, but other consumers of the API may use the single query option since it was included in the spec.", "required": false, "type": "string", "name": "query", "in": "query"}, {"description": "A call to a standard reconciliation service API for multiple queries looks like this:<ul><li>http://foo.com/bar/reconcile?queries={...json object literal...}</li></ul>The json object literal has zero or more key/value pairs with arbitrary keys where the value is in the same format as a single query, e.g.<ul><li>http://foo.com/bar/reconcile?queries={ \"q0\" : { \"query\" : \"foo\" }, \"q1\" : { \"query\" : \"bar\" } }</li></ul>\"q0\" and \"q1\" can be arbitrary strings.", "required": false, "type": "string", "name": "queries", "in": "query"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json", "application/javascript"], "tags": ["SciGraph refine"], "summary": "Reconcile terms", "operationId": "suggestFromTerm"}}, "/resource/mention/count/{rid}": {"get": {"summary": "Get count of all resource mentions", "responses": {"default": {"$ref": "#/definitions/ret_int"}}, "parameters": [{"description": "resource ID", "required": false, "type": "string", "name": "rid", "in": "path"}], "tags": ["Resources"]}}, "/community/{portalname}/snippet/{nifid}": {"get": {"summary": "Get snippets for a view from a community", "responses": {"default": {"$ref": "#/definitions/apiReturn_comm"}}, "parameters": [{"description": "portalname of the community", "required": true, "type": "string", "name": "portalname", "in": "path"}, {"description": "the view id", "required": true, "type": "string", "name": "nifid", "in": "path"}], "tags": ["Community"]}}, "/scigraph/vocabulary/categories": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "Categories can be used to limit results", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Get all categories", "operationId": "getCategories"}}, "/resource/mention/view/{rid}": {"get": {"summary": "Gets all mentions for a resource", "responses": {"default": {"$ref": "#/definitions/ret_obj_array"}}, "parameters": [{"description": "resource ID", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "Counts the number of mentions", "required": false, "type": "integer", "name": "count", "in": "query"}, {"description": "offset", "required": false, "type": "integer", "name": "offset", "in": "query"}, {"description": "orderby fields", "required": false, "type": "string", "name": "orderby", "in": "query"}], "tags": ["Resources"]}}, "/resource/rel/add/{rid}": {"post": {"summary": "Add new relationship", "responses": {"default": {"$ref": "#/definitions/ret_add_or_del"}}, "parameters": [{"description": "scicrunch id", "required": true, "type": "string", "name": "rid", "in": "path"}, {"description": "left side of relationship string", "required": true, "type": "string", "name": "id1", "in": "formData"}, {"description": "right side of relationship string", "required": true, "type": "string", "name": "id2", "in": "formData"}, {"description": "type of id that is not rid (rel)", "required": true, "type": "string", "name": "type", "in": "formData"}, {"description": "name of relationship", "required": true, "type": "string", "name": "relationship", "in": "formData"}, {"description": "user", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Resources"]}}, "/scigraph/graph/relationship_types": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphApi"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph graph"], "summary": "Get all relationship types", "operationId": "getRelationships"}}, "/resource/mention/view/{rid}/{mentionid}": {"get": {"summary": "Single mention for a resource", "responses": {"default": {"$ref": "#/definitions/ret_str_array"}}, "parameters": [{"description": "Resource ID of mention", "required": false, "type": "string", "name": "rid", "in": "path"}, {"description": "ID of mention", "required": false, "type": "string", "name": "mentionid", "in": "path"}], "tags": ["Resources"]}}, "/resource/mention/vote/{rid}/{mentionid}": {"post": {"summary": "Vote a mention as good or bad", "responses": {"default": {"$ref": "#/definitions/ret_vote"}}, "parameters": [{"description": "Vote for the mention.  Can either be good or bad.", "required": true, "type": "string", "name": "vote", "in": "formData"}, {"description": "Scicrunch ID", "required": true, "type": "string", "name": "rid", "in": "path"}, {"description": "The pmid or doi", "required": true, "type": "string", "name": "mentionid", "in": "path"}, {"description": "curator", "required": true, "type": "string", "name": "key", "in": "formData"}], "tags": ["Resources"]}}, "/scigraph/cypher/execute": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"type": "string"}}}, "description": "The graph is in read-only mode, this service will fail with queries which alter the graph, like CREATE, DELETE or REMOVE. Example: START n = node:node_auto_index(iri='DOID:4') match (n) return n", "parameters": [{"schema": {"$ref": "#/definitions/SGCypherUtil"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGGraphDatabaseService"}, "required": false, "name": "body", "in": "body"}, {"description": "The cypher query to execute", "required": true, "type": "string", "name": "cypherQuery", "in": "query"}, {"description": "Limit", "default": "10", "required": true, "in": "query", "type": "string", "name": "limit"}], "produces": ["text/plain", "application/json"], "tags": ["SciGraph cypher"], "summary": "Execute an arbitrary Cypher query.", "operationId": "execute"}}, "/community/{community_portal_name}/dataservices/{category}": {"get": {"summary": "get a community category resource", "responses": {"default": {"$ref": "#/definitions/gen_apiReturn_comm"}}, "parameters": [{"description": "community portal name", "required": true, "type": "string", "name": "community_portal_name", "in": "path"}, {"description": "category name", "required": true, "type": "string", "name": "category", "in": "path"}, {"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}], "tags": ["Community"]}}, "/scigraph/analyzer/enrichment": {"post": {"produces": ["application/json"], "operationId": "enrichPost", "responses": {"200": {"headers": {}, "description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGAnalyzerResult"}, "type": "array"}}}, "parameters": [{"schema": {"$ref": "#/definitions/SGProviderHyperGeometricAnalyzer"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGAnalyzeRequest"}, "required": false, "name": "body", "in": "body"}], "tags": ["SciGraph analyzer"]}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGAnalyzerResult"}}}, "description": "", "parameters": [{"schema": {"$ref": "#/definitions/SGProviderHyperGeometricAnalyzer"}, "required": false, "name": "body", "in": "body"}, {"description": "A list of CURIEs for nodes whose attributes are to be tested for enrichment. For example, a list of genes.", "items": {"type": "string"}, "required": true, "collectionFormat": "csv", "in": "query", "type": "array", "name": "sample"}, {"description": "CURIE for parent ontology class for the attribute to be tested. For example, GO biological process", "required": true, "type": "string", "name": "ontologyClass", "in": "query"}, {"description": "A path expression that connects sample nodes to attribute class nodes", "required": true, "type": "string", "name": "path", "in": "query"}, {"description": "Name of the JSONP callback ('fn' by default). Supplying this parameter or requesting a javascript media type will cause a JSONP response to be rendered.", "required": false, "type": "string", "name": "callback", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph analyzer"], "summary": "Class Enrichment Service", "operationId": "enrich"}}, "/scigraph/annotations/complete": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGEntityAnnotation"}, "type": "array"}}}, "description": "A convenience resource for retrieving both a list of entities and annotated content. <em>NOTE:</em> This is an abuse of REST principals. This POST operation doesn't create resources", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "formData"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "formData", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "formData", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "formData", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "formData", "type": "string", "name": "includeNumbers"}], "produces": ["application/json"], "tags": ["SciGraph annotations"], "summary": "Get embedded annotations as well as a separate list", "consumes": ["application/x-www-form-urlencoded"], "operationId": "postEntitiesAndContent"}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGEntityAnnotation"}, "type": "array"}}}, "description": "A convenience resource for retrieving both a list of entities and annotated content", "parameters": [{"description": "The content to annotate", "required": true, "type": "string", "name": "content", "in": "query"}, {"description": "A set of categories to include", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "includeCat"}, {"description": "A set of categories to exclude", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "excludeCat"}, {"description": "The minimum number of characters in annotated entities", "default": "4", "required": false, "in": "query", "type": "string", "name": "minLength"}, {"description": "Should only the longest entity be returned for an overlapping group", "default": "false", "required": false, "in": "query", "type": "string", "name": "longestOnly"}, {"description": "Should abbreviations be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAbbrev"}, {"description": "Should acronyms be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeAcronym"}, {"description": "Should numbers be included", "default": "false", "required": false, "in": "query", "type": "string", "name": "includeNumbers"}], "produces": ["application/json"], "tags": ["SciGraph annotations"], "summary": "Get embedded annotations as well as a separate list", "consumes": ["application/x-www-form-urlencoded"], "operationId": "getEntitiesAndContent"}}, "/dataservices/federation/data/{viewid}": {"get": {"summary": "search a single data view", "responses": {"default": {"$ref": "#/definitions/object"}}, "parameters": [{"description": "the view ID (example nlx_144509-1 is the scicrunch registry view ID)", "required": true, "type": "string", "name": "viewid", "in": "path"}, {"description": "query", "required": false, "type": "string", "name": "q", "in": "query"}, {"required": false, "type": "integer", "name": "count", "in": "query"}, {"required": false, "type": "integer", "name": "offset", "in": "query"}, {"description": "Facets specified like facetName:facetValue", "required": false, "type": "string", "name": "facet", "in": "query"}, {"description": "Facets specified like filterName:filterValue", "required": false, "type": "string", "name": "filter", "in": "query"}], "tags": ["Data services"]}}, "/ilx/search/term/{term}": {"get": {"summary": "Search on a term", "responses": {"default": {"$ref": "#/definitions/apiReturn_ilx"}}, "parameters": [{"description": "Term being searched", "required": true, "type": "string", "name": "term", "in": "path"}], "tags": ["ILX and term"]}}, "/scigraph/vocabulary/term/{term}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/SGConcept"}, "type": "array"}}, "404": {"description": "Concept with term could not be found"}}, "description": "Makes a best effort to provide \"exactish\" matching. Individual tokens within multi-token labels are not matched (ie: \"foo bar\" would not be returned by a search for \"bar\"). Results are not guaranteed to be unique.", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "Term to find", "required": true, "type": "string", "name": "term", "in": "path"}, {"description": "Maximum result count", "default": "20", "required": false, "in": "query", "type": "string", "name": "limit"}, {"description": "Should synonyms be matched", "default": "true", "required": false, "in": "query", "type": "string", "name": "searchSynonyms"}, {"description": "Should abbreviations be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAbbreviations"}, {"description": "Should acronyms be matched", "default": "false", "required": false, "in": "query", "type": "string", "name": "searchAcronyms"}, {"description": "Categories to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "category"}, {"description": "CURIE prefixes to search (defaults to all)", "items": {"type": "string"}, "required": false, "collectionFormat": "csv", "in": "query", "type": "array", "name": "prefix"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Find a concept from a term", "operationId": "findByTerm"}}, "/scigraph/lexical/sentences": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"type": "string"}, "type": "array"}}}, "description": "", "parameters": [{"description": "The text to split", "required": true, "type": "string", "name": "text", "in": "query"}], "produces": ["application/json"], "tags": ["SciGraph lexical"], "summary": "Split text into sentences.", "operationId": "getSentences"}}, "/scigraph/vocabulary/id/{id}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/SGConceptDTO"}}, "404": {"description": "Concept with ID could not be found"}}, "description": "Find concepts that match either a IRI or a CURIE. ", "parameters": [{"schema": {"$ref": "#/definitions/SGVocabulary"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGDozerBeanMapper"}, "required": false, "name": "body", "in": "body"}, {"schema": {"$ref": "#/definitions/SGCurieUtil"}, "required": false, "name": "body", "in": "body"}, {"description": "ID to find", "required": true, "type": "string", "name": "id", "in": "path"}], "produces": ["application/json"], "tags": ["SciGraph vocabulary"], "summary": "Find a concept by its ID", "operationId": "findById"}}}, "tags": [{"name": "cypher", "description": "Cypher utility services"}, {"name": "analyzer", "description": "Analysis services"}, {"name": "vocabulary", "description": "Vocabulary services"}, {"name": "refine", "description": "OpenRefine Reconciliation Services"}, {"name": "graph", "description": "Graph services"}, {"name": "annotations", "description": "Annotation services"}, {"name": "lexical", "description": "Lexical services"}, {"name": "dynamic", "description": "Dynamic Cypher resources"}], "basePath": "/api/1", "definitions": {"SGCustomConverter": {"type": "object"}, "SGGraph": {"type": "object", "properties": {"edges": {"$ref": "#/definitions/SGIterableEdge"}, "features": {"$ref": "#/definitions/SGFeatures"}, "vertices": {"$ref": "#/definitions/SGIterableVertex"}}}, "SGPreview": {"type": "object", "properties": {"url": {"type": "string"}, "width": {"type": "integer", "format": "int32"}, "height": {"type": "integer", "format": "int32"}}}, "apiReturn_array_string": {"type": "object", "properties": {"data": {"items": {"type": "string"}, "type": "array"}, "success": {"type": "boolean"}}}, "SGGraphDatabaseService": {"type": "object", "properties": {"allLabels": {"$ref": "#/definitions/SGResourceIterableLabel"}, "allNodes": {"$ref": "#/definitions/SGResourceIterableNode"}, "allPropertyKeys": {"$ref": "#/definitions/SGResourceIterableString"}, "allRelationshipTypesInUse": {"$ref": "#/definitions/SGResourceIterableRelationshipType"}, "allRelationships": {"$ref": "#/definitions/SGResourceIterableRelationship"}, "allLabelsInUse": {"$ref": "#/definitions/SGResourceIterableLabel"}, "allRelationshipTypes": {"$ref": "#/definitions/SGResourceIterableRelationshipType"}}}, "SGCurieUtil": {"type": "object", "properties": {"prefixes": {"items": {"type": "string"}, "type": "array"}, "curieMap": {"additionalProperties": {"type": "string"}, "type": "object"}}}, "ret_str_array": {"type": "object", "properties": {"data": {"$ref": "#/definitions/resourceMapping1"}, "success": {"type": "boolean"}}}, "apiReturn_comm": {"properties": {"data": {"$ref": "#/definitions/communityMapping"}, "success": {"type": "boolean"}}}, "SGCompletion": {"type": "object", "properties": {"completion": {"type": "string"}, "concept": {"$ref": "#/definitions/SGConceptDTOLite"}, "type": {"type": "string"}}}, "SGCustomFieldMapper": {"type": "object"}, "SGProviderHyperGeometricAnalyzer": {"type": "object"}, "SGIterableEdge": {"type": "object"}, "apiReturn_entityMapping": {"type": "object", "properties": {"data": {"$ref": "#/definitions/entityMapping"}, "success": {"type": "boolean"}}}, "SGToken": {"type": "object", "properties": {"start": {"type": "integer", "format": "int32"}, "token": {"type": "object", "properties": {}}, "end": {"type": "integer", "format": "int32"}}}, "SGMappingMetadata": {"type": "object", "properties": {"classMappings": {"items": {"$ref": "#/definitions/SGClassMappingMetadata"}, "type": "array"}}}, "SGConcept": {"type": "object", "properties": {"acronyms": {"items": {"type": "string"}, "type": "array"}, "deprecated": {"default": false, "type": "boolean"}, "abbreviations": {"items": {"type": "string"}, "type": "array"}, "labels": {"items": {"type": "string"}, "type": "array"}, "iri": {"type": "string"}, "synonyms": {"items": {"type": "string"}, "type": "array"}, "categories": {"items": {"type": "string"}, "type": "array"}, "anonymous": {"default": false, "type": "boolean"}, "definitions": {"items": {"type": "string"}, "type": "array"}, "id": {"type": "integer", "format": "int64"}, "types": {"items": {"type": "string"}, "type": "array"}, "equivalentClasses": {"items": {"type": "string"}, "type": "array"}}}, "vote": {"type": "object", "properties": {"vote": {"type": "string"}, "rid": {"type": "string"}, "mentionid": {"type": "string"}, "key": {"type": "string"}}}, "apiReturn_ilx": {"type": "object", "properties": {"data": {"$ref": "#/definitions/ilxSearchMapping"}, "success": {"type": "boolean"}}}, "SGServiceMetadata": {"type": "object", "properties": {"identifierSpace": {"type": "string"}, "preview": {"$ref": "#/definitions/SGPreview"}, "name": {"type": "string"}, "schemaSpace": {"type": "string"}, "view": {"$ref": "#/definitions/SGView"}}}, "rsc_edit": {"type": "object", "properties": {"fields": {"type": "string"}, "rid": {"type": "string"}}}, "apiReturn_array_entityMapping": {"type": "object", "properties": {"data": {"items": {"$ref": "#/definitions/entityMapping"}, "type": "array"}, "success": {"type": "boolean"}}}, "SGAnalyzerResult": {"type": "object", "properties": {"iri": {"type": "string"}, "labels": {"type": "string"}, "getpValue": {"type": "number", "format": "double"}}}, "SGResourceIterableRelationshipType": {"type": "object"}, "ret_field_add": {"type": "object", "properties": {"data": {"$ref": "#/definitions/field_add"}, "success": {"type": "boolean"}}}, "SGResourceIterableRelationship": {"type": "object"}, "SGresult": {"type": "object", "properties": {"score": {"type": "number", "format": "double"}, "type": {"items": {"type": "string"}, "type": "array"}, "id": {"type": "string"}, "match": {"default": false, "type": "boolean"}, "name": {"type": "string"}}}, "SGConceptDTOLite": {"type": "object", "properties": {"curie": {"type": "string"}, "deprecated": {"default": false, "type": "boolean"}, "abbreviations": {"items": {"type": "string"}, "type": "array"}, "labels": {"items": {"type": "string"}, "type": "array"}, "iri": {"type": "string"}, "synonyms": {"items": {"type": "string"}, "type": "array"}, "acronyms": {"items": {"type": "string"}, "type": "array"}, "categories": {"items": {"type": "string"}, "type": "array"}}}, "SGDozerBeanMapper": {"type": "object", "properties": {"customConverters": {"items": {"$ref": "#/definitions/SGCustomConverter"}, "type": "array"}, "mappingFiles": {"items": {"type": "string"}, "type": "array"}, "customFieldMapper": {"$ref": "#/definitions/SGCustomFieldMapper"}, "customConvertersWithId": {"additionalProperties": {"$ref": "#/definitions/SGCustomConverter"}, "type": "object"}, "mappingMetadata": {"$ref": "#/definitions/SGMappingMetadata"}, "eventListeners": {"items": {"$ref": "#/definitions/SGDozerEventListener"}, "type": "array"}}}, "genCommunityMapping": {"type": "object", "properties": {"response": {"type": "object"}}}, "SGDozerEventListener": {"type": "object"}, "gen_apiReturn_comm": {"properties": {"data": {"$ref": "#/definitions/genCommunityMapping"}, "success": {"type": "boolean"}}}, "SGClassMappingMetadata": {"type": "object", "properties": {"destinationMapEmptyString": {"default": false, "type": "boolean"}, "dateFormat": {"type": "string"}, "mapId": {"type": "string"}, "destinationClassName": {"type": "string"}, "mappingDirection": {"$ref": "#/definitions/SGMappingDirection"}, "fieldMappings": {"items": {"$ref": "#/definitions/SGFieldMappingMetadata"}, "type": "array"}, "trimStrings": {"default": false, "type": "boolean"}, "wildcard": {"default": false, "type": "boolean"}, "stopOnErrors": {"default": false, "type": "boolean"}, "sourceClassName": {"type": "string"}, "sourceMapNull": {"default": false, "type": "boolean"}, "sourceMapEmptyString": {"default": false, "type": "boolean"}, "destinationMapNull": {"default": false, "type": "boolean"}}}, "apiReturn_apiKeyPermission": {"type": "object", "properties": {"data": {"items": {"$ref": "#/definitions/apiKeyPermission"}, "type": "array"}, "success": {"type": "boolean"}}}, "SGResourceIterableLabel": {"type": "object"}, "ret_edit": {"type": "object", "properties": {"data": {"$ref": "#/definitions/rsc_edit"}, "success": {"type": "boolean"}}}, "mention_add": {"type": "object", "properties": {"rid": {"type": "string"}, "mentionid": {"type": "string"}, "key": {"type": "string"}}}, "apiKeyPermission": {"type": "object", "properties": {"active": {"type": "integer"}, "created_time": {"type": "integer"}, "permission_data": {"type": "string"}, "permission_type": {"type": "string"}}}, "SGFieldMappingMetadata": {"type": "object", "properties": {"customConverter": {"type": "string"}, "destinationFieldSetMethod": {"type": "string"}, "dateFormat": {"type": "string"}, "sourceName": {"type": "string"}, "destinationFieldGetMethod": {"type": "string"}, "sourceFieldSetMethod": {"type": "string"}, "destinationName": {"type": "string"}, "mappingDirection": {"$ref": "#/definitions/SGMappingDirection"}, "copyByReference": {"default": false, "type": "boolean"}, "sourceFieldGetMethod": {"type": "string"}, "destinationFieldAccessible": {"default": false, "type": "boolean"}, "sourceFieldAccessible": {"default": false, "type": "boolean"}}}, "SGCypherUtil": {"type": "object", "properties": {"curieMap": {"additionalProperties": {"type": "string"}, "type": "object"}}}, "SGResourceIterableNode": {"type": "object"}, "SGVocabulary": {"type": "object", "properties": {"allCategories": {"items": {"type": "string"}, "type": "array"}, "allCuriePrefixes": {"items": {"type": "string"}, "type": "array"}}}, "object": {"type": "object", "properties": {"data": {"type": "string"}, "success": {"type": "boolean"}}}, "ret_vote": {"type": "object", "properties": {"data": {"$ref": "#/definitions/vote"}, "success": {"type": "boolean"}}}, "SGEntityAnnotation": {"type": "object", "properties": {"start": {"type": "integer", "format": "int32"}, "token": {"$ref": "#/definitions/SGEntity"}, "end": {"type": "integer", "format": "int32"}}}, "resourceMapping2": {"type": "object", "properties": {"results": {"items": {"type": "object"}, "type": "array"}}}, "SGMappingDirection": {"type": "object"}, "SGView": {"type": "object", "properties": {"url": {"type": "string"}}}, "resourceMapping1": {"type": "object", "properties": {"results": {"items": {"type": "string"}, "type": "array"}}}, "ret_int": {"type": "object", "properties": {"data": {"type": "integer"}, "success": {"type": "boolean"}}}, "SGFeatures": {"type": "object", "properties": {"supportsLongProperty": {"default": false, "type": "boolean"}, "supportsDoubleProperty": {"default": false, "type": "boolean"}, "supportsVertexProperties": {"default": false, "type": "boolean"}, "supportsVertexIndex": {"default": false, "type": "boolean"}, "supportsFloatProperty": {"default": false, "type": "boolean"}, "supportsMixedListProperty": {"default": false, "type": "boolean"}, "supportsUniformListProperty": {"default": false, "type": "boolean"}, "supportsEdgeIndex": {"default": false, "type": "boolean"}, "supportsSerializableObjectProperty": {"default": false, "type": "boolean"}, "supportsSelfLoops": {"default": false, "type": "boolean"}, "supportsEdgeKeyIndex": {"default": false, "type": "boolean"}, "supportsThreadedTransactions": {"default": false, "type": "boolean"}, "supportsKeyIndices": {"default": false, "type": "boolean"}, "supportsTransactions": {"default": false, "type": "boolean"}, "supportsEdgeProperties": {"default": false, "type": "boolean"}, "isPersistent": {"default": false, "type": "boolean"}, "supportsStringProperty": {"default": false, "type": "boolean"}, "isWrapper": {"default": false, "type": "boolean"}, "supportsThreadIsolatedTransactions": {"default": false, "type": "boolean"}, "supportsVertexKeyIndex": {"default": false, "type": "boolean"}, "supportsIndices": {"default": false, "type": "boolean"}, "supportsMapProperty": {"default": false, "type": "boolean"}, "supportsPrimitiveArrayProperty": {"default": false, "type": "boolean"}, "supportsBooleanProperty": {"default": false, "type": "boolean"}, "supportsDuplicateEdges": {"default": false, "type": "boolean"}, "supportsVertexIteration": {"default": false, "type": "boolean"}, "supportsIntegerProperty": {"default": false, "type": "boolean"}, "ignoresSuppliedIds": {"default": false, "type": "boolean"}, "supportsEdgeRetrieval": {"default": false, "type": "boolean"}, "hasImplicitElements": {"default": false, "type": "boolean"}, "supportsEdgeIteration": {"default": false, "type": "boolean"}}}, "SGIterableVertex": {"type": "object"}, "communityMapping": {"type": "object", "properties": {"snippet": {"type": "string"}}}, "ret_obj_array": {"type": "object", "properties": {"data": {"$ref": "#/definitions/resourceMapping2"}, "success": {"type": "boolean"}}}, "SGRelationshipType": {"type": "object"}, "SGResourceIterableString": {"type": "object"}, "errorObject": {"type": "object", "properties": {"errormsg": {"type": "string"}}}, "SGPosToken": {"type": "object", "properties": {"start": {"type": "integer", "format": "int32"}, "token": {"type": "string"}, "end": {"type": "integer", "format": "int32"}, "pos": {"type": "string"}}}, "ilxSearchMapping": {"type": "object", "properties": {"comment": {"type": "string"}, "uid": {"type": "string"}, "synonyms": {"items": {"type": "object"}, "type": "array"}, "superclasses": {"items": {"type": "object"}, "type": "array"}, "id": {"type": "string"}, "relationships": {"items": {"type": "object"}, "type": "array"}, "mappings": {"items": {"type": "object"}, "type": "array"}, "orig_id": {"type": "string"}, "label": {"type": "string"}, "version": {"type": "string"}, "annotation_type": {"items": {"type": "object"}, "type": "array"}, "type": {"type": "string"}, "annotations": {"items": {"type": "object"}, "type": "array"}, "status": {"type": "string"}, "definition": {"type": "string"}, "cid": {"type": "string"}, "display_superclass": {"type": "string"}, "ontologies": {"items": {"type": "object"}, "type": "array"}, "orig_time": {"type": "string"}, "time": {"type": "string"}, "orig_cid": {"type": "string"}, "existing_ids": {"items": {"type": "object"}, "type": "array"}, "ilx": {"type": "string"}}}, "SGEntity": {"type": "object", "properties": {"terms": {"items": {"type": "string"}, "type": "array"}, "id": {"type": "string"}, "categories": {"items": {"type": "string"}, "type": "array"}}}, "SGAnalyzeRequest": {"required": ["ontologyClass", "path", "samples"], "type": "object", "properties": {"path": {"type": "string"}, "ontologyClass": {"type": "string"}, "samples": {"items": {"type": "string"}, "type": "array"}}}, "elasticIndices": {"type": "object", "properties": {"data": {"items": {"properties": {"status": {"type": "string"}, "index": {"type": "string"}, "health": {"type": "string"}, "docs.count": {"type": "string"}, "pri.store.size": {"type": "string"}}}, "type": "array"}, "success": {"type": "boolean"}}}, "ret_mention_add": {"type": "object", "properties": {"data": {"$ref": "#/definitions/mention_add"}, "success": {"type": "boolean"}}}, "rsc_add_del": {"type": "object", "properties": {"relationship": {"type": "string"}, "id2": {"type": "string"}, "id1": {"type": "string"}, "key": {"type": "string"}, "rid": {"type": "string"}, "type": {"type": "string"}}}, "SGConceptDTO": {"type": "object", "properties": {"curie": {"type": "string"}, "deprecated": {"default": false, "type": "boolean"}, "abbreviations": {"items": {"type": "string"}, "type": "array"}, "labels": {"items": {"type": "string"}, "type": "array"}, "iri": {"type": "string"}, "synonyms": {"items": {"type": "string"}, "type": "array"}, "acronyms": {"items": {"type": "string"}, "type": "array"}, "definitions": {"items": {"type": "string"}, "type": "array"}, "categories": {"items": {"type": "string"}, "type": "array"}}}, "SGGraphApi": {"type": "object", "properties": {"allPropertyKeys": {"items": {"type": "string"}, "type": "array"}, "allRelationshipTypes": {"items": {"$ref": "#/definitions/SGRelationshipType"}, "type": "array"}}}, "field_add": {"type": "object", "properties": {"key": {"type": "string"}, "resource_type": {"type": "integer"}, "columns": {"type": "string"}, "cid": {"type": "integer"}}}, "SGConceptView": {"type": "object", "properties": {"concept": {"$ref": "#/definitions/SGConcept"}}}, "entityMapping": {"type": "object", "properties": {"match_substring": {"type": "integer"}, "status": {"type": "string"}, "timestamp": {"type": "integer"}, "value": {"type": "string"}, "source": {"type": "string"}, "table_name": {"type": "string"}, "curation_status": {"type": "string"}, "relation": {"type": "string"}, "identifier": {"type": "string"}, "external_id": {"type": "string"}, "col": {"type": "string"}}}, "ret_add_or_del": {"type": "object", "properties": {"data": {"$ref": "#/definitions/rsc_add_del"}, "success": {"type": "boolean"}}}}, "swagger": "2.0"}